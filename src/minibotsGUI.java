/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jason
 */
import java.util.*;
import java.io.*;
import java.awt.event.*;
import javax.bluetooth.*;
import javax.swing.*;
import javax.microedition.io.*;
public class minibotsGUI extends javax.swing.JFrame {
public BTUtility bt;
    /**
     * Creates new form minibotsGUI
     */
    public minibotsGUI() {
        timer = new java.util.Timer();
        initComponents();
        ButtonGroup groupUp = new ButtonGroup();
        ButtonGroup groupRight = new ButtonGroup();
        groupUp.add(upButton);
        groupUp.add(downButton);
        groupUp.add(noneUpButton);
        groupRight.add(rightButton);
        groupRight.add(leftButton);
        groupRight.add(noneRightButton);
        bt = new BTUtility();
        cmdList = new LinkedList<CommandTime>();
    }

    /**
     * This method is called from within the constr        initComponents();
uctor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftb = new javax.swing.JButton();
        forwardb = new javax.swing.JButton();
        backb = new javax.swing.JButton();
        connectbt = new javax.swing.JButton();
        rightb = new javax.swing.JButton();
        kbctrl = new javax.swing.JToggleButton();
        doit = new javax.swing.JButton();
        btadd = new javax.swing.JTextField();
        sTime = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        downButton = new javax.swing.JRadioButton();
        upButton = new javax.swing.JRadioButton();
        leftButton = new javax.swing.JRadioButton();
        rightButton = new javax.swing.JRadioButton();
        noneUpButton = new javax.swing.JRadioButton();
        noneRightButton = new javax.swing.JRadioButton();
        queueComm = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        commList = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        leftb.setText("left");
        leftb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                leftbMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                leftbMouseReleased(evt);
            }
        });

        forwardb.setText("forward");
        forwardb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                forwardbMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                forwardbMouseReleased(evt);
            }
        });

        backb.setText("back");
        backb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backbMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                backbMouseReleased(evt);
            }
        });

        connectbt.setText("connect");
        connectbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectbtActionPerformed(evt);
            }
        });

        rightb.setText("right");
        rightb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rightbMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rightbMouseReleased(evt);
            }
        });
        rightb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightbActionPerformed(evt);
            }
        });

        kbctrl.setText("Keyboard CTRL");
        kbctrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbctrlActionPerformed(evt);
            }
        });
        kbctrl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                kbctrlKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                kbctrlKeyReleased(evt);
            }
        });

        doit.setText("Do Schedule");
        doit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doitActionPerformed(evt);
            }
        });

        btadd.setText("001204059258");
        btadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btaddActionPerformed(evt);
            }
        });

        sTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sTimeActionPerformed(evt);
            }
        });

        jLabel1.setText("time");

        downButton.setText("Down");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        upButton.setText("Up");

        leftButton.setText("Left");

        rightButton.setText("Right");

        noneUpButton.setText("none");

        noneRightButton.setText("none");

        queueComm.setText("Queue");
        queueComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueCommActionPerformed(evt);
            }
        });

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        commList.setColumns(20);
        commList.setRows(5);
        jScrollPane1.setViewportView(commList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(104, 104, 104))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sTime, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(leftButton)
                                    .addComponent(rightButton)
                                    .addComponent(noneRightButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(noneUpButton))
                                .addGap(32, 32, 32))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(195, 195, 195)
                                    .addComponent(forwardb))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(doit)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(backb, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(leftb)
                                .addGap(81, 81, 81)
                                .addComponent(rightb))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(kbctrl))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(199, 199, 199)
                                .addComponent(connectbt))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btadd, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 258, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(queueComm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {forwardb, leftb});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backb, rightb});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {downButton, leftButton, noneRightButton, noneUpButton, rightButton, upButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(forwardb)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftb)
                    .addComponent(rightb))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backb)
                            .addComponent(doit))
                        .addGap(27, 27, 27)
                        .addComponent(kbctrl)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leftButton)
                            .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rightButton)
                            .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noneRightButton)
                            .addComponent(noneUpButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btadd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(queueComm)
                    .addComponent(playButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectbt)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {forwardb, leftb});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void leftbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftbMousePressed
        // TODO add your handling code here:
                     motionStart(LEFTDIR, "LEFT");

    }//GEN-LAST:event_leftbMousePressed

    private void leftbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftbMouseReleased
        // TODO add your handling code here:
                     motionStop(LEFTDIR, " ");

    }//GEN-LAST:event_leftbMouseReleased

    private void rightbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightbMousePressed
        // TODO add your handling code here:
                     motionStart(RIGHTDIR, "RIGHT");

    }//GEN-LAST:event_rightbMousePressed

    private void rightbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightbMouseReleased
        // TODO add your handling code here:
                     motionStop(RIGHTDIR, " ");

    }//GEN-LAST:event_rightbMouseReleased

    private void forwardbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardbMousePressed
        // TODO add your handling code here:
                     motionStart(UPDIR, "UP");
    }//GEN-LAST:event_forwardbMousePressed

    private void forwardbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardbMouseReleased
        // TODO add your handling code here:
                     motionStop(UPDIR, " ");
    }//GEN-LAST:event_forwardbMouseReleased

    private void backbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backbMousePressed
        // TODO add your handling code here:
                     motionStart(DOWNDIR, "DOWN");
    }//GEN-LAST:event_backbMousePressed

    private void backbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backbMouseReleased
                     motionStop(DOWNDIR, " ");
        // TODO add your handling code here:
    }//GEN-LAST:event_backbMouseReleased

    private void connectbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectbtActionPerformed
        bt.start();
        Thread commReaderThread = new COMMReader();
        commReaderThread.start();// TODO add your handling code here:
        connectbt.setEnabled(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_connectbtActionPerformed

    private void rightbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rightbActionPerformed

    private void kbctrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbctrlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kbctrlActionPerformed

    private void kbctrlKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kbctrlKeyPressed
        // TODO add your handling code here:
                switch(evt.getKeyCode())
        {
            case KeyEvent.VK_LEFT:      motionStart(LEFTDIR, "LEFT");
                                        break;
            case KeyEvent.VK_RIGHT:     motionStart(RIGHTDIR, "RIGHT");
                                        break;
            case KeyEvent.VK_UP:        motionStart(UPDIR, "UP");
                                        break;
            case KeyEvent.VK_DOWN:      motionStart(DOWNDIR, "DOWN");
                                        break;
        }
    }//GEN-LAST:event_kbctrlKeyPressed

    private void kbctrlKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kbctrlKeyReleased
        // TODO add your handling code here:
        // TODO add your handling code here:
                switch(evt.getKeyCode())
        {
            case KeyEvent.VK_LEFT:      motionStop(LEFTDIR, " ");
                                        break;
            case KeyEvent.VK_RIGHT:     motionStop(RIGHTDIR, " ");
                                        break;
            case KeyEvent.VK_UP:        motionStop(UPDIR, " ");
                                        break;
            case KeyEvent.VK_DOWN:      motionStop(DOWNDIR, " ");
                                        break;
        }        // TODO add your handling code here:
    }//GEN-LAST:event_kbctrlKeyReleased

private void scheduleCom(CommandTime cmd)
{
        if (cmdList.poll() == null)
        {
            scheduleRun(cmd.task, cmd.duration);
        }
        else
        {
            cmdList.add(cmd);
        }
}
    private void scheduleRun(int dir, int time)
    {
            motionStart(dir, " ");
            final int hello = dir;
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    motionStop(hello, " ");
                    try{
                       // Thread.sleep(5);
                    } catch (Exception e) {}
                    if (cmdList.peek() != null)
                    {
                        CommandTime cmd = cmdList.remove();
                        scheduleRun(cmd.task, cmd.duration);
                    }
                }
                }, time);
    }
    private void doitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doitActionPerformed

    private void btaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btaddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btaddActionPerformed

    private void sTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sTimeActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_downButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        CommandTime cmd = cmdList.remove();
        scheduleRun(cmd.task, cmd.duration);
    }//GEN-LAST:event_playButtonActionPerformed

    private void queueCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueCommActionPerformed
        int output = 0;
        int time;
        if (upButton.isSelected())
            output += UPDIR;
        else if (downButton.isSelected())
            output += DOWNDIR;
        if (rightButton.isSelected())
            output += RIGHTDIR;
        else if (leftButton.isSelected())
            output += LEFTDIR;
        time = Integer.parseInt(sTime.getText());
        cmdList.add(new CommandTime(output, time));
        commList.append("direction: " + Integer.toString(output) + " time: " + Integer.toString(time) + "\n");
            }//GEN-LAST:event_queueCommActionPerformed
    private void motionStop(int changeByte, String button)
    {
        outSerial[0] = (byte) (outSerial[0] & ~changeByte);
        buttonID = button;
    }
    
    private void motionStart(int changeByte, String button)
    {
        outSerial[0] = (byte) (outSerial[0] | changeByte);
        buttonID = button;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(minibotsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(minibotsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(minibotsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(minibotsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new minibotsGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backb;
    private javax.swing.JTextField btadd;
    private javax.swing.JTextArea commList;
    private javax.swing.JButton connectbt;
    private javax.swing.JButton doit;
    private javax.swing.JRadioButton downButton;
    private javax.swing.JButton forwardb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton kbctrl;
    private javax.swing.JRadioButton leftButton;
    private javax.swing.JButton leftb;
    private javax.swing.JRadioButton noneRightButton;
    private javax.swing.JRadioButton noneUpButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton queueComm;
    private javax.swing.JRadioButton rightButton;
    private javax.swing.JButton rightb;
    private javax.swing.JTextField sTime;
    private javax.swing.JRadioButton upButton;
    // End of variables declaration//GEN-END:variables
    ButtonGroup groupUp;
    ButtonGroup groupRight;
    public java.util.Timer timer;
    public Queue<CommandTime> cmdList;
    public JList devicesList;
    public Thread btUtility;
    public String btConnectionURL = "";
    public boolean sendData = false;
    public static int LEFTDIR = 0x04;
    public static int RIGHTDIR = 0x08;
    public static int UPDIR = 0x20;
    public static int DOWNDIR = 0x10;
    public byte[] outSerial = {0};
    public String serialView_out="0";
    public String buttonID="_";
    public String HDLED="Head Lights OFF";
    public String BRKLED="Brake Lights OFF";
    public class CommandTime
    {
        public int task;
        public int duration;
        public CommandTime(int inDir, int inDuration)
        {
            task = inDir;
            duration = inDuration;
        }
    }
    private class BTUtility extends Thread implements DiscoveryListener{

        Vector remoteDevices = new Vector();
        Vector deviceNames = new Vector();

        DiscoveryAgent discoveryAgent;

        public BTUtility() {

            try {
                LocalDevice localDevice = LocalDevice.getLocalDevice();
                discoveryAgent = localDevice.getDiscoveryAgent();
                discoveryAgent.startInquiry(DiscoveryAgent.GIAC, this);
            } catch(BluetoothStateException e) {}
        }

        public void deviceDiscovered(RemoteDevice remoteDevice, DeviceClass cod) {
		   remoteDevices.addElement(remoteDevice);
        }
        public void inquiryCompleted(int discType) {}

        
// program gets connection data here
        public void run(){
        }

        public void servicesDiscovered(int transID, ServiceRecord[] servRecord){

        }

        public void serviceSearchCompleted(int transID, int respCode) {

        }

   }
        class COMMReader extends Thread {

	public COMMReader() {	}

	public void run(){

		try{
System.out.println(btConnectionURL);
    
            StreamConnection connection = (StreamConnection)Connector.open("btspp://"+ btadd.getText() + ":1;authenticate=false;encrypt=false;master=false");
            OutputStream out = connection.openOutputStream();

            byte temp = 0;

            // sendData is set false by default and an Exit Command
			sendData = true;

            // everything RFCOM-wise happens in this while-loop
                while(sendData == true){
                try{
                this.sleep(1);
                } catch(Exception e){}
                // if new output data is available, send and write to form
                if (outSerial[0] != temp){
                    temp = outSerial[0];
                    out.write(outSerial[0]);
                    serialView_out = Integer.toBinaryString(outSerial[0]);
System.out.println("writing: " + outSerial[0]);
                }
            }

			connection.close();

		}catch(IOException ioe){
			ioe.printStackTrace();
System.out.println(btConnectionURL);
		}


	}


    }

}
